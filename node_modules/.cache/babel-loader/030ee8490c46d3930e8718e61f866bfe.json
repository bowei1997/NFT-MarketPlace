{"ast":null,"code":"import _regeneratorRuntime from\"/Users/boweima/Desktop/NFT-MarketPlace-beta/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"/Users/boweima/Desktop/NFT-MarketPlace-beta/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"/Users/boweima/Desktop/NFT-MarketPlace-beta/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import Navbar from\"./Navbar\";import axie from\"../tile.jpeg\";import{useLocation,useParams}from'react-router-dom';import MarketplaceJSON from\"../Marketplace.json\";import axios from\"axios\";import{useState}from\"react\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function NFTPage(props){var _useState=useState({}),_useState2=_slicedToArray(_useState,2),data=_useState2[0],updateData=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),dataFetched=_useState4[0],updateDataFetched=_useState4[1];var _useState5=useState(\"\"),_useState6=_slicedToArray(_useState5,2),message=_useState6[0],updateMessage=_useState6[1];var _useState7=useState(\"0x\"),_useState8=_slicedToArray(_useState7,2),currAddress=_useState8[0],updateCurrAddress=_useState8[1];function getNFTData(_x){return _getNFTData.apply(this,arguments);}function _getNFTData(){_getNFTData=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(tokenId){var ethers,provider,signer,addr,contract,tokenURI,listedToken,meta,item;return _regeneratorRuntime().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:ethers=require(\"ethers\");//After adding your Hardhat network to your metamask, this code will get providers and signers\nprovider=new ethers.providers.Web3Provider(window.ethereum);signer=provider.getSigner();_context.next=5;return signer.getAddress();case 5:addr=_context.sent;//Pull the deployed contract instance\ncontract=new ethers.Contract(MarketplaceJSON.address,MarketplaceJSON.abi,signer);//create an NFT Token\n_context.next=9;return contract.tokenURI(tokenId);case 9:tokenURI=_context.sent;_context.next=12;return contract.getListedTokenForId(tokenId);case 12:listedToken=_context.sent;_context.next=15;return axios.get(tokenURI);case 15:meta=_context.sent;meta=meta.data;console.log(listedToken);item={price:meta.price,tokenId:tokenId,seller:listedToken.seller,owner:listedToken.owner,image:meta.image,name:meta.name,description:meta.description};console.log(item);updateData(item);updateDataFetched(true);console.log(\"address\",addr);updateCurrAddress(addr);case 24:case\"end\":return _context.stop();}}},_callee);}));return _getNFTData.apply(this,arguments);}function buyNFT(_x2){return _buyNFT.apply(this,arguments);}function _buyNFT(){_buyNFT=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(tokenId){var ethers,provider,signer,contract,salePrice,transaction;return _regeneratorRuntime().wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;ethers=require(\"ethers\");//After adding your Hardhat network to your metamask, this code will get providers and signers\nprovider=new ethers.providers.Web3Provider(window.ethereum);signer=provider.getSigner();//Pull the deployed contract instance\ncontract=new ethers.Contract(MarketplaceJSON.address,MarketplaceJSON.abi,signer);salePrice=ethers.utils.parseUnits(data.price,'ether');updateMessage(\"Buying the NFT... Please Wait (Upto 5 mins)\");//run the executeSale function\n_context2.next=9;return contract.executeSale(tokenId,{value:salePrice});case 9:transaction=_context2.sent;_context2.next=12;return transaction.wait();case 12:alert('You successfully bought the NFT!');updateMessage(\"\");_context2.next=19;break;case 16:_context2.prev=16;_context2.t0=_context2[\"catch\"](0);alert(\"Upload Error\"+_context2.t0);case 19:case\"end\":return _context2.stop();}}},_callee2,null,[[0,16]]);}));return _buyNFT.apply(this,arguments);}var params=useParams();var tokenId=params.tokenId;if(!dataFetched)getNFTData(tokenId);return/*#__PURE__*/_jsxs(\"div\",{style:{\"min-height\":\"100vh\"},children:[/*#__PURE__*/_jsx(Navbar,{}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex ml-20 mt-20\",children:[/*#__PURE__*/_jsx(\"img\",{src:data.image,alt:\"\",className:\"w-2/5\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"text-xl ml-20 space-y-8 text-white shadow-2xl rounded-lg border-2 p-5\",children:[/*#__PURE__*/_jsxs(\"div\",{children:[\"Name: \",data.name]}),/*#__PURE__*/_jsxs(\"div\",{children:[\"Description: \",data.description]}),/*#__PURE__*/_jsxs(\"div\",{children:[\"Price: \",/*#__PURE__*/_jsx(\"span\",{className:\"\",children:data.price+\" ETH\"})]}),/*#__PURE__*/_jsxs(\"div\",{children:[\"Owner: \",/*#__PURE__*/_jsx(\"span\",{className:\"text-sm\",children:data.owner})]}),/*#__PURE__*/_jsxs(\"div\",{children:[\"Seller: \",/*#__PURE__*/_jsx(\"span\",{className:\"text-sm\",children:data.seller})]}),/*#__PURE__*/_jsxs(\"div\",{children:[currAddress==data.owner||currAddress==data.seller?/*#__PURE__*/_jsx(\"button\",{className:\"enableEthereumButton bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded text-sm\",onClick:function onClick(){return buyNFT(tokenId);},children:\"Buy this NFT\"}):/*#__PURE__*/_jsx(\"div\",{className:\"text-emerald-700\",children:\"You are the owner of this NFT\"}),/*#__PURE__*/_jsx(\"div\",{className:\"text-green text-center mt-3\",children:message})]})]})]})]});}","map":{"version":3,"names":["Navbar","axie","useLocation","useParams","MarketplaceJSON","axios","useState","NFTPage","props","data","updateData","dataFetched","updateDataFetched","message","updateMessage","currAddress","updateCurrAddress","getNFTData","tokenId","ethers","require","provider","providers","Web3Provider","window","ethereum","signer","getSigner","getAddress","addr","contract","Contract","address","abi","tokenURI","getListedTokenForId","listedToken","get","meta","console","log","item","price","seller","owner","image","name","description","buyNFT","salePrice","utils","parseUnits","executeSale","value","transaction","wait","alert","params"],"sources":["/Users/boweima/Desktop/NFT-MarketPlace-beta/src/components/NFTpage.js"],"sourcesContent":["import Navbar from \"./Navbar\";\nimport axie from \"../tile.jpeg\";\nimport { useLocation, useParams } from 'react-router-dom';\nimport MarketplaceJSON from \"../Marketplace.json\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\n\nexport default function NFTPage (props) {\n\nconst [data, updateData] = useState({});\nconst [dataFetched, updateDataFetched] = useState(false);\nconst [message, updateMessage] = useState(\"\");\nconst [currAddress, updateCurrAddress] = useState(\"0x\");\n\nasync function getNFTData(tokenId) {\n    const ethers = require(\"ethers\");\n    //After adding your Hardhat network to your metamask, this code will get providers and signers\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    const addr = await signer.getAddress();\n    //Pull the deployed contract instance\n    let contract = new ethers.Contract(MarketplaceJSON.address, MarketplaceJSON.abi, signer)\n    //create an NFT Token\n    const tokenURI = await contract.tokenURI(tokenId);\n    const listedToken = await contract.getListedTokenForId(tokenId);\n    let meta = await axios.get(tokenURI);\n    meta = meta.data;\n    console.log(listedToken);\n\n    let item = {\n        price: meta.price,\n        tokenId: tokenId,\n        seller: listedToken.seller,\n        owner: listedToken.owner,\n        image: meta.image,\n        name: meta.name,\n        description: meta.description,\n    }\n    console.log(item);\n    updateData(item);\n    updateDataFetched(true);\n    console.log(\"address\", addr)\n    updateCurrAddress(addr);\n}\n\nasync function buyNFT(tokenId) {\n    try {\n        const ethers = require(\"ethers\");\n        //After adding your Hardhat network to your metamask, this code will get providers and signers\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n\n        //Pull the deployed contract instance\n        let contract = new ethers.Contract(MarketplaceJSON.address, MarketplaceJSON.abi, signer);\n        const salePrice = ethers.utils.parseUnits(data.price, 'ether')\n        updateMessage(\"Buying the NFT... Please Wait (Upto 5 mins)\")\n        //run the executeSale function\n        let transaction = await contract.executeSale(tokenId, {value:salePrice});\n        await transaction.wait();\n\n        alert('You successfully bought the NFT!');\n        updateMessage(\"\");\n    }\n    catch(e) {\n        alert(\"Upload Error\"+e)\n    }\n}\n\n    const params = useParams();\n    const tokenId = params.tokenId;\n    if(!dataFetched)\n        getNFTData(tokenId);\n\n    return(\n        <div style={{\"min-height\":\"100vh\"}}>\n            <Navbar></Navbar>\n            <div className=\"flex ml-20 mt-20\">\n                <img src={data.image} alt=\"\" className=\"w-2/5\" />\n                <div className=\"text-xl ml-20 space-y-8 text-white shadow-2xl rounded-lg border-2 p-5\">\n                    <div>\n                        Name: {data.name}\n                    </div>\n                    <div>\n                        Description: {data.description}\n                    </div>\n                    <div>\n                        Price: <span className=\"\">{data.price + \" ETH\"}</span>\n                    </div>\n                    <div>\n                        Owner: <span className=\"text-sm\">{data.owner}</span>\n                    </div>\n                    <div>\n                        Seller: <span className=\"text-sm\">{data.seller}</span>\n                    </div>\n                    <div>\n                    { currAddress == data.owner || currAddress == data.seller ?\n                        <button className=\"enableEthereumButton bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded text-sm\" onClick={() => buyNFT(tokenId)}>Buy this NFT</button>\n                        : <div className=\"text-emerald-700\">You are the owner of this NFT</div>\n                    }\n                    \n                    <div className=\"text-green text-center mt-3\">{message}</div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}